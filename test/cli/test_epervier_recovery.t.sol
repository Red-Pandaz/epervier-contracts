// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import {Test, console} from "forge-std/Test.sol";
import "../../src/ETHFALCON/ZKNOX_epervier.sol";

contract TestEpervierRecovery is Test {
    ZKNOX_epervier public epervierVerifier;
    
    function setUp() public {
        epervierVerifier = new ZKNOX_epervier();
    }
    
    function testEpervierRecovery() public {
        // These are the signature components from your Python test
        bytes memory intentMessage = hex"496e74656e7420746f20706169722077697468206164647265737320307866333946643665353161616438384636463463653661423838323732373963666646623932323636206e6f6e63652030207369676e61747572652065363031343266353433616631353132353135306161316237643462393333306139383966653639326233353861333738643536636132363264626434316333343431626333323966613662383633653733303333333065373530663737383139376262306237656163616561393162316434613361363633393333303963633162";
        
        bytes memory salt = hex"efce9da4e20c89b67f75be0adceb22ebb5c319a2db18075705e5f544faf2f08156979a7b48c1246d";
        
        uint256[] memory cs1 = new uint256[](32);
        cs1[0] = 353372707121693352297752319447871751863818349901026295334867813981722259107;
        cs1[1] = 69238135578249560987811005804402337550577065478985933640259079699761594499;
        cs1[2] = 643463588492573773745090566917439768102091481066342724290480022693167432014;
        cs1[3] = 21521968360653841118117334286890685015544930400417351522411267572261395235055;
        cs1[4] = 150182167248020150073264943214968801443506300127937381292594691198603964260;
        cs1[5] = 67465087670538562785875411310230121411103641252486664825969176047854944359;
        cs1[6] = 21661546793545717195749739696688635507765849099509710779684838970144536789140;
        cs1[7] = 115174784359846132953343037974631180559128840774338881204427290729796349867;
        cs1[8] = 21644207099450832567331148489175706435641540490525219257657468011964375957539;
        cs1[9] = 21600034498898117427405339146051813066515982972528270023306673502122974851017;
        cs1[10] = 21670703501808764947268230684842119119419544926667924412448981784296579149767;
        cs1[11] = 21594404825722647618010744090511535726859004686205172071456269409674088951803;
        cs1[12] = 385502164686115728157735306721604262838554291248946382930394748148259696604;
        cs1[13] = 449109602612645542779932783093561192759554465641413944749107400658416119572;
        cs1[14] = 389034079363829016517816364540336713429873704861313728470137581818957201607;
        cs1[15] = 21643888432925990385699123419583593348921352397022189017435782048114711134354;
        cs1[16] = 403167804507001784832568924487306482927324475393986038584870891824660676629;
        cs1[17] = 254427945455206213226126027118099817560735546227691739633217302357813833526;
        cs1[18] = 45938940323247655092218994167425621799371850872531096459291469485323988820;
        cs1[19] = 203512150030023460671126776731748173615726212854007230469963236297619746489;
        cs1[20] = 333939541242432883955292574558838681495332652978418915434211967958960778915;
        cs1[21] = 84809284109018376186544263103258212320129195393378926298585121868412170176;
        cs1[22] = 21299668605771523513326373693941153904263677028301902790448154292181838856395;
        cs1[23] = 21541401139291577288485074113783697124182257412512086963410983467223068651441;
        cs1[24] = 21608539979749315390520721450098509439390469419375852610791654744721321242426;
        cs1[25] = 21483095132225845344827852266546963027343508485878714895804698882233139539880;
        cs1[26] = 21410653410017137845606196129031736034226784094998769316471719983058132414121;
        cs1[27] = 21110289080462215431091696335301363309101624958073548357012416930168902135805;
        cs1[28] = 249456180815414089971987153176970951368085348709715712416029767124692893898;
        cs1[29] = 134610447629599099586238473498521179547212355412683115866882992899258974333;
        cs1[30] = 21518436144490225615361094669963315109779108501302375075457058368692234366682;
        cs1[31] = 10604506310613054678988043506928113941072282004163847556028613245740920695;
        
        uint256[] memory cs2 = new uint256[](32);
        cs2[0] = 464684390746086015482142227142851867864732599618451324960323662375711616707;
        cs2[1] = 21230434734836403678733883741113312355089570431328465218883223627392768356335;
        cs2[2] = 100714763078012780251360068932938092292206025038765101765486710934522179196;
        cs2[3] = 104571032918767453607777720335087979222118935514811389837322175593572609796;
        cs2[4] = 295067454837382942170959838047042996788057181154689734073186264025006473287;
        cs2[5] = 47713529821903875285491862429270618426967100766165597524164453453510803672;
        cs2[6] = 192591511419012343354332264457828022928868926759064746699949402652251717971;
        cs2[7] = 21084115070232296408826182022837373902545802964006375370628060410237654204458;
        cs2[8] = 21693676288071465219040136429152534447232587256417160829838735207784165933194;
        cs2[9] = 141354563988734392709762937956271328883036443832047149416459293014139875104;
        cs2[10] = 21652715016603167914894888824684182700153791149184328524836277812802335354862;
        cs2[11] = 167851549565053425276798031796245371544361795753504356771509849533949292380;
        cs2[12] = 229691040113955910194406082957955755370463152101181937332399680507046080322;
        cs2[13] = 231459688469379371089136421689890590785468852912025548024064289238206066614;
        cs2[14] = 279163588662371890539561128832565957349106769619669186199421179315719778248;
        cs2[15] = 21433950735126105244188189986513508493519740000344069692461708365446383992974;
        cs2[16] = 265348665010718571853915559708946050422392613619148521991061449371177058360;
        cs2[17] = 21273166147318624703117333720794730744605526178443054579980260433041870303164;
        cs2[18] = 21666849523468448365362191576461221160420007331920199379879816889791766081324;
        cs2[19] = 171710790045057574045103886487063079912109622877762871143395173741304873335;
        cs2[20] = 21506065303345670713575909999193094713909601496461016945330954122319454023582;
        cs2[21] = 42734642836955300511895503625821451416303993357800919399234772731530313788;
        cs2[22] = 247684480938431353560905489387716789222534055537790742415241176085140877268;
        cs2[23] = 224720483701928946810941140068188806616069748468391656470380079876046991313;
        cs2[24] = 274191554430180817291855987157715740527864807532066169291486053242814070952;
        cs2[25] = 267119507081983674004918281105013581740908804138708277907786033804889555087;
        cs2[26] = 540984279975163937854163208366147639195280985760607987420502183344383078225;
        cs2[27] = 319803901945440758054583383226026817084324496791397089318036578021718634419;
        cs2[28] = 20960437689821111602185568314732740553588038073753904793324401578404268277840;
        cs2[29] = 194355959025499918282142709762471185666813933907201987018549398685058859119;
        cs2[30] = 21592644831453000483449018659496267074552132299641723161234496313401112657992;
        cs2[31] = 21645974000443320074798318520588888964797387920523034512047742799036827172986;
        
        uint256 hint = 10564;
        
        console.log("Testing Epervier recovery with signature data from Python test...");
        console.log("Intent message length:", intentMessage.length);
        console.log("Salt length:", salt.length);
        console.log("cs1 length:", cs1.length);
        console.log("cs2 length:", cs2.length);
        console.log("Hint:", hint);
        
        // Try to recover the address
        address recoveredAddress = epervierVerifier.recover(intentMessage, salt, cs1, cs2, hint);
        
        console.log("Recovered address:", recoveredAddress);
        console.log("Recovered address (hex):", vm.toString(recoveredAddress));
        
        // Check if the recovered address is non-zero
        assertTrue(recoveredAddress != address(0), "Recovered address should not be zero");
        
        console.log("Epervier recovery test passed!");
    }
} 