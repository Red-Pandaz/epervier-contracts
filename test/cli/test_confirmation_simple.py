#!/usr/bin/env python3

import subprocess
from eth_account import Account
from eth_account.messages import encode_defunct

# Contract address (update this after deployment)
CONTRACT_ADDRESS = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"

# RPC URL for Supersim L2
RPC_URL = "http://127.0.0.1:9545"

# ETH private key (account 1 from Supersim)
ETH_PRIVATE_KEY = "0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d"
ETH_ADDRESS = "0x70997970C51812dc3A010C7d01b50e0d17dc79C8"

def main():
    print(f"ETH private key address: {ETH_ADDRESS}")
    print(f"Ethereum address: {ETH_ADDRESS}")
    
    # Step 1: Create confirmation message
    print("\nStep 1: Creating confirmation message...")
    confirmation_message = f"Confirm binding to address {ETH_ADDRESS}"
    print(f"Confirmation message: {confirmation_message}")
    confirmation_message_hex = confirmation_message.encode().hex()
    print(f"Confirmation message hex: {confirmation_message_hex}")
    
    # Step 2: Create ETH signature for confirmation
    print("\nStep 2: Creating ETH signature for confirmation...")
    account = Account.from_key(ETH_PRIVATE_KEY)
    
    # Create the message hash using the standard Ethereum signing method
    message_hash = encode_defunct(confirmation_message.encode())
    signed_message = account.sign_message(message_hash)
    eth_signature = signed_message.signature
    
    print(f"Confirmation message: {confirmation_message}")
    print(f"Message hash: {signed_message.message_hash.hex()}")
    print(f"ETH signature: {eth_signature.hex()}")
    print(f"r: 0x{eth_signature[:32].hex()}")
    print(f"s: 0x{eth_signature[32:64].hex()}")
    print(f"v: {eth_signature[64]}")
    
    # Step 3: Use the same Epervier signature components from the intent test
    print("\nStep 3: Using Epervier signature from intent test...")
    
    # These are the signature components from the successful intent test
    salt_hex = "3193e9cf7124dd92c03dae50ca360d73dfeb308224b76f78e54eb2964ef3f3137331e9895fb59aa2"
    hint = 9821
    cs1 = [199982095429502923340772106933183561789542028258123741663973524044624101415,21649177462196024477306746136574148555677534307243239482462477743251122237426,21574974716309276798538095541833726808737380967614962469263275139548481126599,21700415924196006723797832068510179419572954063678433262568545941468218535840,21679542374242325249893227252723632343002554116151944067594763292362217554021,21530801868129929238159037181591796372914307271276224415118703338283268964526,47706196781408218121837631638582780746923116270592100367858173541647789965,21684844878571727522164984146753238367936040748749704030376428965775910305872,288319622903865771551342672885061175511996753525862131975573171105465761834,118708176965166287685953126039884677906336144983500885562280914525526884395,279162650077755672694754383675643366262980246248523112438277404666440658883,21642112235756779720734104222595351776890206523481889124351717971970818387700,26826257335176602470036102125645653977488541523433964390613082896131817689,120153639476308267353665160795288877214310244487473436018073779202712535075,21622679662935874316315431360422857851089253672050999260277185975830705483644,21686609385091316415423196353624962729408161283415266845655414405811173195792,579533871327537028084100955307957820934188821906732937453087369592543522643,363974652131647042440248785926122721125603357043117108984222173941801430829,593661530413261774690074478849228039108689219451228304388905777022151307258,90437033277461522958644331100102926136169946255138077939126489161377579235,21467194484091359334651309921490827993448717765834234643543025184712131936256,21647413369924650221495022772356290834476544718595138949626364921109866348552,7072214210176860906769599753548716046927408808839330480444174236010086405,21548793777271043904532503494251701039300874718557977532050541336871075840079,19436315273783539806108239394719239804743994173630599077214074361760579697,21630072619512099324892392948813629765102899598000183808184036382138066731019,21531127490383053973650908750870000095656536008700905657077573780099805884403,21652712585186708656914792048808689285320363189425341231971670148044449316906,46263219592891337624062861167489334045858240865999783324616873328142581928,21454828167403509305639475982099263413519585447934480194980313903137022291833,48031517531611216724500374134115609077295684577303282225939062882508943197,33901356122581773756486877046475427117471120262482472741593652688773120074]
    cs2 = [2090398430335494834039577775786700034167939488679447967240196562040860641,21267868302247381298559155483832492860363112329929737077233635348546511777665,332495216041847846384233409646835082024215629847522171042924290189315223442,21612397112306716999129145524984208866174164681250737461439266997151934721942,3863063804647609109074328873475956834822680632298260177129496301303443076,21697212538351585769943901486259228575632782078884619121512500410844759195852,166084190339861502700831539120645670672306159647437727526599043642770010029,230015551985953118202652201345088273999116409531658846829917112660077850541,124010259818247141015417129165415846742857148756314887105767856350767939729,21456597769295912921139660664552177419989984000880257368971269659324657118970,21173898814984749194568913822242161540846090756458065347015705411933387817137,21661871854606432447086257490102679878164116412939250541422509775855636787141,439945728011391784924674921297957709943784527358108489242833936652596412441,33574084342051660785112490727847584473844345090719402445445339999060569987,21559069259471983777980972656310952311335810741695635451477662707752801873695,298927876657682925064977859639417211787476877276677659583321504405058105275,42730226369702001608126047161722644141361617743440828434482260905516990517,21709575345434577065162171726854953318427845040420309937029949576176711499784,86576697382452844113039651366573832806067314708231864375929670668891205558,21432183052326505206175066479611595203545037862793623483456818432818950319999,21590872889022065346901957425608307731030939552602996572730293881331083116605,67142264530991517945698006511411321450013714094053403967831847690616319750,136056363518534654522404378664501298670021511506630820688804745220668522496,21491928159301813527045688247025461458705506815726656891834497313038140387260,21431855790382802809696730339335235064657176385120228731320794009267667087336,91877400384263930338674759229029897701667178111843640920912918489945473041,151956670956163535998039959935873140800903306106273039989621630400036012183,58306470356047093917994366312319737725211061458710654485683985362935689194,561864165486205894063883483297400216743631031629703560117743937936551641096,21202488323699722140329317949574669719918837897730759421239942716603009609535,328960308615962740952975548210519496990005113750191679767620735602841431978,21557626282215664117730289736606916584119446093082876272648711824185464193143]
    
    print(f"Salt: {salt_hex}")
    print(f"Hint: {hint}")
    print(f"cs1 length: {len(cs1)}")
    print(f"cs2 length: {len(cs2)}")
    
    # Step 4: Get current PQ nonce
    print("\nStep 4: Getting current PQ nonce...")
    public_key = [1060949616175605039904708348861159580941700240548, 0]
    public_key_hash = f"0x{public_key[0]:064x}{public_key[1]:064x}"
    
    # Get the current nonce for this PQ key
    nonce_command = [
        "cast", "call", CONTRACT_ADDRESS,
        "pqKeyNonces(bytes32)(uint256)", public_key_hash,
        "--rpc-url", RPC_URL
    ]
    
    result = subprocess.run(nonce_command, capture_output=True, text=True)
    if result.returncode == 0:
        pq_nonce = int(result.stdout.strip())
        print(f"Current PQ nonce: {pq_nonce}")
    else:
        print("Could not get PQ nonce, assuming 0")
        pq_nonce = 0
    
    # Step 5: Submit confirmation
    print("\nStep 5: Submitting confirmation to registry contract...")
    
    # Convert salt from hex to bytes
    salt_bytes = bytes.fromhex(salt_hex)
    
    # Prepare the command
    command = [
        "cast", "send", CONTRACT_ADDRESS,
        "confirmRegistration(bytes,bytes,uint256[],uint256[],uint256,uint256,uint256[2])",
        f"0x{confirmation_message.encode().hex()}",  # confirmationMessage
        f"0x{salt_bytes.hex()}",  # salt
        f"[{','.join(map(str, cs1))}]",  # cs1
        f"[{','.join(map(str, cs2))}]",  # cs2
        str(hint),  # hint
        str(pq_nonce),  # pqNonce
        f"[{public_key[0]}, {public_key[1]}]",  # publicKey
        "--rpc-url", RPC_URL,
        "--private-key", ETH_PRIVATE_KEY,
        "--gas-limit", "25000000"
    ]
    
    print(f"Running: {' '.join(command)}")
    result = subprocess.run(command, capture_output=True, text=True)
    print(f"Return code: {result.returncode}")
    print(f"STDOUT: {result.stdout}")
    print(f"STDERR: {result.stderr}")
    
    if result.returncode == 0:
        print("\n✅ Confirmation successful!")
    else:
        print("\n❌ Confirmation failed!")

if __name__ == "__main__":
    main() 